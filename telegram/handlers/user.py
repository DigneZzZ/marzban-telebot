from datetime import datetime
from app.db import GetDB, crud
from app.models.user import UserResponse
from app.telegram import bot
from pytz import UTC
from telebot.custom_filters import ChatFilter
from telebot.util import extract_arguments

from app.utils.system import readable_size

bot.add_custom_filter(ChatFilter())



@bot.message_handler(commands=['usage'])
def usage_command(message):
    username = extract_arguments(message.text)
    if not username:
        return bot.reply_to(message, 'Usage: `/usage <username>`', parse_mode='MarkdownV2')

    with GetDB() as db:
        dbuser = crud.get_user(db, username)

        if not dbuser:
            return bot.reply_to(message, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç")
        user = UserResponse.from_orm(dbuser)

        statuses = {
            '–∞–∫—Ç–∏–≤–Ω—ã–π': '‚úÖ',
            '–∏—Å—Ç–µ–∫–∞–µ—Ç': 'üï∞',
            '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω': 'üìµ',
            '–æ—Ç–∫–ª—é—á–µ–Ω': '‚ùå'}

        text = f'''\
<b>–ò–º—è: </b> <code>{user.username}</code> 
{statuses[user.status]} <b>–°—Ç–∞—Ç—É—Å:</b> <code>{user.status.title()}</code>
<b>–¢—Ä–∞—Ñ–∏–∫: </b> <code>{readable_size(user.data_limit) if user.data_limit else '–±–µ–∑–ª–∏–º–∏—Ç'}</code>
<code>{f'<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: </b> {readable_size(user.used_traffic)}' if user.used_traffic else ''}</code>
<b>–°—Ä–æ–∫:</b> <code>{datetime.fromtimestamp(user.expire).date() if user.expire else '–±–µ—Å—Å—Ä–æ—á–Ω–æ'}</code>
<code>{f'<b>–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: </b>'(datetime.fromtimestamp(user.expire or 0) - datetime.now()).days if user.expire else ''}</code>'''

    return bot.reply_to(message, text, parse_mode='HTML')
